@using BlazorChat.Client.Pages
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IUserManager UserManager
@inject IChatManager ChatManager
@inject Chat ChatRazor

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<AuthorizeView>
    <Authorized>
        <div style="margin-left:30px;">
            <MudButton Href="/chat" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Filled.Chat"> Chat</MudButton>
        </div>
        <div class="pa-4 justify-center my-4 mud-text-align-center ml-auto">
            <MudTooltip Text="@title">
                <MudFab Color="Color.Primary" Size="Size.Small" StartIcon="@MudIcon" OnClick="(()=>ChangeTheme(IsDark))" Class="mr-2" />
            </MudTooltip>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="text-transform: none;letter-spacing: 1.5px;" Class="mr-2 email">
                Hi, @(!string.IsNullOrEmpty(Email) ? Email.ToLower(): Name)
            </MudButton>

            <MudBadge Content="@TotalUnreadCount" Visible="@isUnreadCount" Color="Color.Error" Overlap="true" Class="mx-6 my-4">
                <MudTooltip Text="@UnreadCountTitle">
                    <MudIconButton Variant="Variant.Outlined" Color="Color.Surface" Icon="@Icons.Filled.Notifications" OnClick="ReadAllUnreadMessages"></MudIconButton>
                </MudTooltip>
            </MudBadge>

            <MudTooltip Text="Click to Sign out">
                <MudIconButton Variant="Variant.Filled" Color="Color.Error" Icon="@Icons.Filled.Logout" OnClick="BeginSignOut"></MudIconButton>
            </MudTooltip>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="pa-4 justify-center my-4 mud-text-align-center ml-auto">
            <MudTooltip Text="@title">
                <MudFab Color="Color.Primary" Size="Size.Small" StartIcon="@MudIcon" OnClick="(()=>ChangeTheme(IsDark))" Class="mr-2" />
            </MudTooltip>
            <MudButton Variant="Variant.Filled" Class="mr-2" Color="Color.Primary" EndIcon="@Icons.Filled.PersonAddAlt1" Link="/register">Register</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" EndIcon="@Icons.Filled.Login" Link="/">Log in</MudButton>
        </div>
    </NotAuthorized>
</AuthorizeView>
@code {
    public string MudIcon { get; set; }
    public bool IsDark { get; set; } = false;
    public string Email { get; set; }
    public string Name { get; set; }
    public string Id { get; set; }
    public bool collapse { get; set; } = false;
    public string title { get; set; }
    private MudTheme _theme = new();
    public bool _isDarkMode = false;
    public bool isUnreadCount = false;
    public string UnreadCountTitle { get; set; }
    public int TotalUnreadCount { get; set; } = 0;

    private async Task BeginSignOut(MouseEventArgs args)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Are you sure you want to sign out?");
        parameters.Add("ButtonText", "Yes");
        parameters.Add("Color", Color.Error);

        var result = Dialog.Show<ConfirmDialog>("Confirm", parameters, new DialogOptions { DisableBackdropClick = true, MaxWidth = MaxWidth.Small, FullWidth = true });
        var res = await result.GetReturnValueAsync<bool?>();
        if (Convert.ToBoolean(res))
        {
            await cookie.SetValue("authToken", "", -1);
            ((ApiAuthenticationStateProvider)_stateProvider).MarkUserAsLoggedOut();
            HttpClient.DefaultRequestHeaders.Authorization = null;
            NavigationManager.NavigateTo("/");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var state = await ((ApiAuthenticationStateProvider)_stateProvider).GetAuthenticationStateAsync();
        var user = state.User;

        if (user.Identity.IsAuthenticated)
        {
            Id = user.Claims.Where(a => a.Type == "Id").Select(a => a.Value).FirstOrDefault();
            Name = user.Claims.Where(a => a.Type == "Name").Select(a => a.Value).FirstOrDefault();
            Email = user.Claims.Where(a => a.Type == "Email").Select(a => a.Value).FirstOrDefault();

            if (!string.IsNullOrEmpty(Id))
            {
                var response = await UserManager.UserInfo(Id);
                if (response.Success && response.Data != null)
                {
                    var res = JsonConvert.DeserializeObject<ApplicationUserResponse>(response.Data.ToString());
                    IsDark = res.IsDark;
                    MudIcon = res.IsDark ? Icons.Outlined.LightMode : Icons.Outlined.DarkMode;
                    title = res.IsDark ? " Switch to Light Mode" : " Switch to Dark Mode";
                    _isDarkMode = IsDark;
                    collapse = true;
                }

                await GetUnreadCount();

            }
        }
        else
        {
            MudIcon = IsDark ? Icons.Outlined.LightMode : Icons.Outlined.DarkMode;
            title = IsDark ? " Switch to Light Mode" : " Switch to Dark Mode";
            _isDarkMode = IsDark;
        }
    }
    public async Task ChangeTheme(bool isDark)
    {
        var value = isDark ? false : true;
        if (!string.IsNullOrEmpty(Id))
        {
            var response = await UserManager.UpdateTheme(Id, value);
            if (response.Success && response.Data != null)
            {
                IsDark = response.Data;
                MudIcon = value ? Icons.Outlined.LightMode : Icons.Outlined.DarkMode;
                title = value ? " Switch to Light Mode" : " Switch to Dark Mode";
                _isDarkMode = value;
            }
        }
        else
        {
            IsDark = value;
            MudIcon = value ? Icons.Outlined.LightMode : Icons.Outlined.DarkMode;
            title = value ? " Switch to Light Mode" : " Switch to Dark Mode";
            _isDarkMode = value;
        }
    }

    private async Task ReadAllUnreadMessages(MouseEventArgs args)
    {
        if (isUnreadCount)
        {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Are you sure you want to mark all messages as read?");
            parameters.Add("ButtonText", "Yes");
            parameters.Add("Color", Color.Error);

            var result = Dialog.Show<ConfirmDialog>
    ("Confirm", parameters, new DialogOptions { DisableBackdropClick = true, MaxWidth = MaxWidth.Small, FullWidth = true });
            var res = await result.GetReturnValueAsync<bool?>();
            if (Convert.ToBoolean(res))
            {
                var isSuccess = await ChatManager.ReadAllMessages();
                if (isSuccess)
                {
                    _snackBar.Add("All message marked as read", Severity.Success);

                    //await ChatRazor.GetUsersAsync();
                    await GetUnreadCount();
                }
                else
                {
                    _snackBar.Add("There is some issue", Severity.Error);
                }

            }
        }
        else
        {
            _snackBar.Add("You don't have any message to mark as read.", Severity.Warning);
        }
    }


    public async Task GetUnreadCount()
    {
        TotalUnreadCount = await ChatManager.GetTotalUnreadCountAsync();

        isUnreadCount = TotalUnreadCount > 0 ? true : false;

        UnreadCountTitle = TotalUnreadCount > 0 ? $"You have {TotalUnreadCount} unread message{(TotalUnreadCount > 1 ? "s" : "")}" : "No unread message yet";
    }
        }
